---
title: "Chapter 3: Vectors - Notes"
format: 
  html:
    number-sections: true
    theme: sandstone
    code-fold: false
    toc: true
    link-external-newwindow: true
---
## Vectors! Overview

- Atomic Vectors -> all elements are the same.
- Generic Vectors or Lists -> elements can differ.
- NULL -> length zero vector.
- Vectors *can* have **attributes** aka metadata.
- Most important attributes:
  - *dimension* -> matrices and arrays.
  - *class* -> S3 vectors.


## Atomic Vectors 
### Basics Recap

- There are **four types** of atomic vectors:
```{mermaid}
flowchart LR
  Vector --> Atomic
  Atomic --> Numeric
  Numeric --> Integer
  Integer -.-> Factor
  Numeric --> Double
  Double -.-> Date
  Double -.-> Difftime
  
  Atomic --> Logical
  Atomic --> Character
  
  Vector --> List
  List -.-> data.frame
  data.frame -.-> data.table
  
  style Logical fill:#f9f
  style Integer fill:#f9f
  style Double fill:#f9f
  style Character fill:#f9f
```

 - There are also complex and raw numeric type vectors, bit off topic for today.
 - A **scalar** is a single value within a vector.
 - You can print the type of a vector with `typeof()` and its length with `length()`.
 
```{r, results='hide'}
# Examples of numeric scalars
a <- 100L # integer: YOU MUST ADD L at the end (L = long integer)
b <- 3 # double!!
c <- (a + b) / b # double
d <- TRUE # logical (also T)
e <- 'scalar' # character
f <- "also scalar" #character and better, "" are preferred. 

letters <- c(a, b, c, d, e, f) # combine scalars with c(.) to create a vector
double_letters <- c(letters, letters)
more_letters <- c('a', 'b', 'c')
numbers <- c(1, 2, 3, 4)


typeof(e)
# > "character"
typeof(a)
# > "integer"
length(a)
# > 1
length(f)
# > 1
length(letters)
# > 6

c(c(1, 2), c(3, 4)) # the flattening rule!
#> [1] 1 2 3 4
```

-> *Go to Notes*

### Testing & Coercing

- You can test if a vector is of a given type with a `is.*()` function:
  - `is.integer()`, `is.logical()`, `is.double()`, and `is.character()` do what you expect.
  - **!!! Avoid:** `is.vector()`, `is.atomic()`, and `is.numeric()` DO NOT test if you have a vector, atomic, or numeric:

::: {#imp-atomic-tests .callout-important}
#### Important Note 1
- `is.atomic()` tests if an object is an atomic vector (logical, integer, double, complex, character or raw) or is NULL (!).
- `is.numeric()` tests if an object has type integer or double and is not of class factor, Date, POSIXt or difftime.
- `is.vector()` tests if an object is a vector (logical, integer, double, complex, character or raw) or an expression and has no attributes, apart from names.
:::

- Atomic vectors elements are always of the **same type**, if not --> they will be coerced.
- You can also deliberately coerce with `as.*()` functions.

- **Coercion hierarchy**:
```{mermaid}
flowchart LR
  logical -->integer
  integer --> double
  double --> character
```

```{r, results=F, warning=FALSE}
str(c("a", 1)) # automatic coercion
#>  chr [1:2] "a" "1"

as.integer(c("1", "1.5", "a")) # deliberate coercion might not work -> NA
#> Warning: NAs introduced by coercion
#> [1]  1  1 NA
```

- R represents missing, or unknown values, with special value: `NA` (short for not applicable).
- The default type of `NA` is a logical object. This is so the presence of an `NA` will not affect the vector. The same hierarchy applies: `NA` (logical) -> `NA_integer_` -> `NA_real_` -> `NA_character_`.
- `NA` != `NaN`.


-> *Go to Question 1.1, 1.2, 1.3*

## Attributes
- Think of attributes as metadata of your vector.

::: {#imp-ephemeral .callout-important}
#### Important Note 2
- You can set attributes, but they are *ephemeral*, the vector will not keep them after operations -> if you want to preserve them -> S3 classes (!!).
:::

```{r, results='hide'}
a <- 1:3 # a vector
attr(a, "x") <- "abcdef" # setting an attribute
attr(a, "x")
#> [1] "abcdef"

a <- structure( # setting an attribute as well
  1:3, 
  x = "abcdef", # more than 1 attribute!
  y = 4:6
)


attributes(sum(a)) # if you sum a elements, attributes disappear.
#> NULL
```

-> *Go to Notes*

- There are 2 **non-ephemeral attributes**:
  - **names**
  - **dim**
  
### Names
- Names are a character vector giving each element a name.
- *Ideally* names should be unique and non-missing. If all names missing -> `NULL`
```{r, results='hide'}
# Can create in multiple ways, these are all equivalent
x <- c(a = 1, b = 2, c = 3)

x <- 1:3
names(x) <- c("a", "b", "c")

x <- setNames(1:3, c("a", "b", "c"))

# can remove it too:
names(x) <- NULL
x <- unname(x)
```

### Dimensions
- Dimensions literally give dimensions to your vector -> by setting them you can create `matrix` and `array` objects.
- A vector without a dim attribute set is NOT 1-dimensional -> it has `NULL` dimensions.

```{r, results='hide'}

x <- matrix(1:6, 
            nrow = 2, 
            ncol = 3)
x
#>      [,1] [,2] [,3]
#> [1,]    1    3    5
#> [2,]    2    4    6


y <- array(1:12, c(2, 3, 2))
y
#> , , 1
#> 
#>      [,1] [,2] [,3]
#> [1,]    1    3    5
#> [2,]    2    4    6
#> 
#> , , 2
#> 
#>      [,1] [,2] [,3]
#> [1,]    7    9   11
#> [2,]    8   10   12
#> 
z <- 1:6
dim(z) <- c(3, 2)
z
#>      [,1] [,2]
#> [1,]    1    4
#> [2,]    2    5
#> [3,]    3    6
```

::: {#imp-matrices .callout-important}
#### Important Note 3
- A `matrix` is not a `data.frame`, although they are both **tabular** data:
  - A matrix in R must contain elements of the same data type, this is not true for a data frame.
  - They do share some common functions: `colnames()`, `rownames()`, `nrow`, `ncol`, `rbind`, `cbind`.
  - Note: `nrow()` != `NROW()` and `ncol()` != `NCOL()`. 

:::


## Class AKA S3 Vectors
- **Note**: this is a short introduction to S3 vectors only. We will look into the S3 system in-depth later.
- **An object with a class becomes an S3 object** -> the object will behave differently with generic functions.
- There are 3 S3 vectors:

```{mermaid}
flowchart LR
  Vector --> Atomic
  Atomic --> Numeric
  Numeric --> Integer
  Integer -..-> factor
  Numeric --> Double
  Double -..-> Date
  Double -..-> POSIXct
  Double -..-> difftime
```

### Factors
- Usually introduced to social scientists as 'categorical variables'.
- A factor is a vector that can contain only predefined values (`levels`).
- They are of `integer` type!!! -> NOT to be treated like a character!
```{r, results='hide'}
# 1. Create a factor, levels set automatically:
x <- factor(c("a", "b", "b", "a"))
x
#> [1] a b b a
#> Levels: a b

# 2. Characteristics:
typeof(x)
#> [1] "integer"
#> 
attributes(x) # class and levels are attributes!
#> $levels
#> [1] "a" "b"
#> 
#> $class
#> [1] "factor"

# 3. They behave differently with generic functions:
sex_char <- c("m", "m", "m")
sex_factor <- factor(sex_char, levels = c("m", "f"))

table(sex_char)
#> sex_char
#> m 
#> 3
table(sex_factor)
#> sex_factor
#> m f 
#> 3 0 
```

::: {#imp-factors .callout-important}
#### Important Note 4
- Many base R functions (e.g. `read.csv()` and `data.frame()`) automatically convert character vectors to factors (not the `tidyverse`).
- Use the argument `stringsAsFactors = FALSE` to suppress this behaviour.
:::

### Date, POSIXct, difftime
- `Date` vectors are built on top of `double` vectors, their value = days since 1970-01-01.
- `POSIXct` vectors are built on top of `double` vectors, their value = seconds since 1970-01-01.
- `difftime` vectors are built on top of `double` vectors, their value = amount of time between pairs of dates or date-times.
```{r, results='hide'}
# 1. Date
today <- Sys.Date()
typeof(today)
#> [1] "double"
attributes(today)
#> $class
#> [1] "Date"

# 2. POSIXct
now_ct <- as.POSIXct("2018-08-01 22:00", 
                     tz = "UTC") # time zone as an attribute
now_ct
#> [1] "2018-08-01 22:00:00 UTC"

# 3. difftime
one_week_1 <- as.difftime(1, 
                          units = "weeks") # units as an attribute

one_week_1
#> Time difference of 1 weeks
```

## Lists
- More complex, each element of a list can be of a different type.

::: {#imp-list .callout-important}
- In fact, **each element of a list is only a reference** -> lists are smaller in size than you might think. 
- This is also how they differ from vectors:
  - vectors -> multiple elements -> one reference
  - lists -> multiple elements -> multiple references.\

:::

- Lists as **recursive** vectors -> can be nested.
```{mermaid}
flowchart LR
  Vector --> List
  List -.-> data.frame
  data.frame -.-> data.table

```

```{r, results='hide'}
l1 <- list( # different typeof elements
  1:3, 
  "a", 
  c(TRUE, FALSE, TRUE), 
  c(2.3, 5.9)
)

str(l1)
#> List of 4
#>  $ : int [1:3] 1 2 3
#>  $ : chr "a"
#>  $ : logi [1:3] TRUE FALSE TRUE
#>  $ : num [1:2] 2.3 5.9

list <- list(1:3)
list_coerce <- as.list(1:3) # are these the same?
unlisted <- unlist(list)
```

## Data.frames and Tibbles (and data.tables)
- They are S3 vectors built on top of lists.
- A data frame is **a named list of vectors** with attributes for (column) names, (row) row.names, and its class, “data.frame”.
- You create a data frame by supplying name-vector pairs to `data.frame()`.

```{r, results='hide'}
df1 <- data.frame(x = 1:3, #name-vector pairs
                  y = letters[1:3])
typeof(df1)
#> [1] "list"

attributes(df1)
#> $names
#> [1] "x" "y"
#> 
#> $class
#> [1] "data.frame"
#> 
#> $row.names
#> [1] 1 2 3
```

- Data frames automatically transform non-syntactic names.
- Every element of a data frame must have the **same length** + shorter inputs are recycled.
```{r, eval=FALSE}

data.frame(x = 1:4, y = 1:2)
#>   x y
#> 1 1 1
#> 2 2 2
#> 3 3 1
#> 4 4 2
data.frame(x = 1:4, y = 1:3)
#> Error in data.frame(x = 1:4, y = 1:3): arguments imply differing number of
#> rows: 4, 3

tibble(x = 1:4, y = 1)
#> # A tibble: 4 x 2
#>       x     y
#>   <int> <dbl>
#> 1     1     1
#> 2     2     1
#> 3     3     1
#> 4     4     1
tibble(x = 1:4, y = 1:2)
#> Error: Tibble columns must have compatible sizes.
#> * Size 4: Existing data.
#> * Size 2: Column `y`.
#> ℹ Only values of size one are recycled.

```

### List columns
::: {#imp-factors .callout-important}
#### Important Note 5
A data frame can have a column that is a list and a list can contain any other object: this means you can put any object in a data frame.
:::
- List-columns need to be created with `I()` (see example) - a `tibble` on the other hand, will do that automatically (it's lazy).
```{r, results='hide'}
df <- data.frame(x = 1:3)
df$y <- list(1:2, 1:3, 1:4)

data.frame(
  x = 1:3, 
  y = I(list(1:2, 1:3, 1:4)) # you need this to prevent R to treat it as a list of column
)
#>   x          y
#> 1 1       1, 2
#> 2 2    1, 2, 3
#> 3 3 1, 2, 3, 4

library(tibble)
tibble(
  x = list(1:3, 3:5), 
  y = c("1, 2", "3, 4, 5")
)
#> # A tibble: 2 × 2
#>   x         y      
#>   <list>    <chr>  
#> 1 <int [3]> 1, 2   
#> 2 <int [3]> 3, 4, 5

# Create a simple data.table
library(data.table)
dt <- data.table(id = 1:3)

# Add a list column with different types of data
dt[, list_col := list(list(c(1, 2, 3)), 
                      list(c("a", "b", "c")), 
                      list(data.table(x = 1:2, y = 3:4)))]

#>       id  list_col
#>    <int>    <list>
#> 1:     1 <list[1]>
#> 2:     2 <list[1]>
#> 3:     3 <list[1]>
#>

```
- Within the `tidyverse`, list-columns are created with `nest()`.
- They simplify management of hierarchical data and could be efficient for storing data but it is harder to debug. 

### Matrix and data frame
- You can have a matrix/array as a column of a data.frame too, but the matrix needs to have the same number of rows (`NROW()`)
- You need to use `I()` or add it after creation.

```{r, results='hide'}
dfm <- data.frame(
  x = 1:3 * 10
)
dfm$y <- matrix(1:9, nrow = 3)
dfm$z <- data.frame(a = 3:1, b = letters[1:3], stringsAsFactors = FALSE)

str(dfm)
#> 'data.frame':    3 obs. of  3 variables:
#>  $ x: num  10 20 30
#>  $ y: int [1:3, 1:3] 1 2 3 4 5 6 7 8 9
#>  $ z:'data.frame':   3 obs. of  2 variables:
#>   ..$ a: int  3 2 1
#>   ..$ b: chr  "a" "b" "c"
```
 

